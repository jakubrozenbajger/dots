#!/bin/bash

echo "Backup run $(date)"

# 1. defaults
DESTINATION="/"
REAL_RUN="no"

# 2. config overrides
_backup_conf_file="$XDG_CONFIG_HOME/backup/backuprc"
[ ! -f "$_backup_conf_file" ] && "No config file found!" && exit 1 
source "$_backup_conf_file"

[ "$DESTINATION" == "/" ] && echo "Destination needs to be provided in $_backup_conf_file" && exit 1
[ "$1" == "-c" ] && REAL_RUN="yes"

## CONSTANTS
FILTER_FILE="$XDG_CONFIG_HOME/backup/backup.filter"
SOURCE="$HOME/"

# Append current PC (hostname) and username to destination
DESTINATION="${DESTINATION%/}/$(hostname)_$USER-$(id -u "$USER")"
TIMESTAMP=$(date +%Y%m%d%H%M%S)

# backup dotfiles
_filterfile="/tmp/filterfile_$TIMESTAMP"
touch "$_filterfile"
command -v chezmoi && chezmoi managed -i d | cut -d '/' -f4- | grep -Ev '^.(config|local(/share)?)$' | awk 'BEGIN{print "+ /.config/\n+ /.local/"} {print "+ " $0 "/***"} END{print "- /.config/**\n- /.local/**"}' >> "$_filterfile"
cat "$FILTER_FILE" >> "$_filterfile"

rsync_commands=(
    "-av"
    "--progress"
    "--human-readable"
    "--log-file=/tmp/rsync.$TIMESTAMP.log"
    "--delete"
    "--delete-excluded"
    "--filter=merge $_filterfile"
    "--filter=dir-merge,- .gitignore"
    "$SOURCE"
    "$DESTINATION"
)

do_rsync() {
    rsync "${rsync_commands[@]}"
}

do_rsync_dry_run() {
    rsync --dry-run "${rsync_commands[@]}"
}

echo "Source:       $SOURCE"
echo "Destination:  $DESTINATION"
echo
if [ "$REAL_RUN" == "yes" ]; then
    do_rsync
else
    do_rsync_dry_run
    printf "\n\nRun command with -c to backup\n"
fi
