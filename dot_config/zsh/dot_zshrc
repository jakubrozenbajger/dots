[[ $- != *i* ]] && return # If not running interactively, don't do anything

alias reload='. $ZDOTDIR/.zshrc'

source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/config"         # common config
source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/config.local"   # local config

# ---[ options ]-------------------------------------------------------------------------------------
# general tweaks
setopt long_list_jobs         # job notifications in the long format
setopt interactive_comments   # recognize comments in input
# dir movement
setopt auto_cd                # if command cannot be executed and it is dir cd into it
setopt auto_pushd             # cd but with pushing onto dir stack
setopt pushd_ignore_dups      # ignore pushd duplicates
setopt pushd_minus            # - instead of + in cd


# ---[ history ]-------------------------------------------------------------------------------------
HISTSIZE=90000
SAVEHIST=90000
HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/zsh/history"
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data


# ---[ completion ]-------------------------------------------------------------------------------------
# todo: move?
zmodload -i zsh/complist
setopt always_to_end
setopt complete_in_word

bindkey -M menuselect '^@' accept-and-infer-next-history
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $user -o pid,user,comm -w -w"
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories # disable named-directories autocompletion
zstyle ':completion::complete:*' use-cache 1 # Use caching so that commands like apt and dpkg complete are useable
zstyle ':completion::complete:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

# todo: move?
autoload -U compinit && compinit && _comp_options+=(globdots)

# ---[ zinit ]-------------------------------------------------------------------------------------
if [ ! -f $ZDOTDIR/.zinit/bin/zinit.zsh ]; then
    print -P "%F{33}Installing zdharma/zinit%f"
    command mkdir -p "$ZDOTDIR/.zinit" && command chmod g-rwX "$ZDOTDIR/.zinit"
    command git clone https://github.com/zdharma/zinit "$ZDOTDIR/.zinit/bin" && \
    print -P "Installation successful" || print -P "%F{160}The clone has failed.%f"
fi
source "$ZDOTDIR/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# todo: see https://github.com/zdharma/zinit#calling-compinit-with-turbo-mode
zinit light-mode for \
  zsh-users/zsh-autosuggestions \
  zsh-users/zsh-completions \
  zdharma/fast-syntax-highlighting \
  zdharma/history-search-multi-word \
  simnalamburt/cgitc \
  simnalamburt/ctrlf \
  MichaelAquilina/zsh-you-should-use \
  OMZP::colored-man-pages \
  OMZ::plugins/docker-compose \
  OMZL::git.zsh

# Easily access the directories you visit most often.
# Usage:
#   $ z work
#   $ <CTRL-G>work
zinit light agkozak/zsh-z
zinit light andrewferrier/fzf-z

# prompt theme
zinit ice ver"minimal"
zinit load rozenj/salt


# ---[ Key bindings ]-------------------------------------------------------------------------------------
function zle-line-init() {
  zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
  echo -ne "\e[5 q"
}
zle -N zle-line-init

function zle-keymap-select() {
  if [[ ${KEYMAP} == vicmd ]] ||
    [[ $1 = 'block' ]]; then
      echo -ne '\e[2 q'
    elif [[ ${KEYMAP} == main ]] ||
      [[ ${KEYMAP} == viins ]] ||
      [[ ${KEYMAP} = '' ]] ||
      [[ $1 = 'beam' ]]; then
          echo -ne '\e[5 q'
  fi
  zle reset-prompt
  #  zle -R
}
zle -N zle-keymap-select


bindkey -v
export KEYTIMEOUT=1

# setup key accordingly
bindkey  "^[[H"   beginning-of-line      # Home
bindkey  "^[[F"   end-of-line            # End
bindkey  "^[[2~"  overwrite-mode         # Insert
bindkey  "^[[3~"  delete-char            # Delete
bindkey  "^?"     backward-delete-char   # Backspace
bindkey  "^[[D"   backward-char          # Left
bindkey  "^[[C"   forward-char           # Right
bindkey  "^[[5~"  up-line-or-history     # PageUp
bindkey  "^[[6~"  down-line-or-history   # PageDown
bindkey  "^[[Z"   reverse-menu-complete  # ShiftTab

# ci", ci', ci`, di", etc
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
  for c in {a,i}{\',\",\`}; do
    bindkey -M $m $c select-quoted
  done
done

# ci{, ci(, ci<, di{, etc
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $m $c select-bracketed
  done
done

## keyup and  keydown search
autoload -U up-line-or-beginning-search && zle -N up-line-or-beginning-search
#bindkey  "^[[A"       history-substring-search-up
bindkey "^[[A" up-line-or-beginning-search

autoload -U down-line-or-beginning-search && zle -N down-line-or-beginning-search
#bindkey  "^[[B"     history-substring-search-down
bindkey "^[[B" down-line-or-beginning-search

bindkey '^[[1;5C' forward-word                        # [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word                       # [Ctrl-LeftArrow] - move backward one word
bindkey '^r' history-incremental-search-backward      # [Ctrl-r] - Search backward incrementally

# Edit line in vim buffer ctrl-v
autoload edit-command-line; zle -N edit-command-line; bindkey '^v' edit-command-line
# Enter vim buffer from normal mode
autoload -U edit-command-line && zle -N edit-command-line && bindkey -M vicmd "^v" edit-command-line


# ---[ Window title ]-------------------------------------------------------------------------------------
case $TERM in
  xterm*|rxvt*|alacritty|st*)
    precmd () {   print -Pn "\e]0;%n@%m: %50<..<%~%<<\a" }
    preexec () {  print -Pn "\e]0;%n@%m: %50<..<%~%<<  [ ${1} ]\a" }
    ;;
esac
