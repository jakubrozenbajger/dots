#!/bin/bash

RC_FILE="$HOME/.backuprc"
FILTER_FILE="$HOME/.backup.filter"

# FIXME: source is always user home
# TODO: parametrize source, adn make path include absolute path eg. backup -s 'HOME/dir' results in backing up to $DESTINATON/$hHOME/dir
SOURCE="$HOME/"
## Default to current user's' home directory if no source path is specified
#if [ "$SOURCE" == "/" ]; then
#    SOURCE="$HOME/"
#    echo "Source path not provided. Using home directory: \"$SOURCE\""
#    echo
#fi

DESTINATION="/"
REAL_RUN="no"

# Check if commandline parameters are passed. If so, set variables
while getopts s:d:c opts; do
    case $opts in
#        s)
#            SOURCE="$OPTARG"
#            ;;
        d)
            DESTINATION="$OPTARG"
            ;;
        c)
            REAL_RUN="yes"
            ;;
    esac
done

#TODO: better parsing of arguments and config file
# Exit if destination is not provided
if [ "$DESTINATION" == "/" ]; then
    if [ -f "$RC_FILE" ] && grep -q "DESTINATION=" "$RC_FILE"; then
        DESTINATION="$(grep "DESTINATION=" "$RC_FILE" | cut -d'=' -f2-)"
    else
        echo "Destination needs to be provided: -d \"destination_path\" or in $RC_FILE"
        exit 1
    fi
fi



# TODO Symlink check instructions: https://stackoverflow.com/questions/59838/check-if-a-directory-exists-in-a-shell-script
# TODO Canonicalize paths instructions (for relative path support): https://stackoverflow.com/questions/32857392/bash-check-if-a-relative-path-exists

# Check if source directory exists
if [ ! -d "$SOURCE" ] || [ ! -r "$SOURCE" ]; then
    echo "Directory \"$SOURCE\" does not exist or is not readable"
    exit 1
fi

# Check if destination directory exists and wirtable
if [ ! -d "$DESTINATION" ] || [ ! -r "$DESTINATION" ]; then
    echo "Directory \"$DESTINATION\" does not exist or is not writable"
    exit 1
fi

# Append current PC (hostname) and username to destination
DESTINATION="${DESTINATION%/}/$(hostname)_$USER-$(id -u "$USER")"

mkdir -p "$DESTINATION/.logs"
TIMESTAMP=$(date +%Y%m%d%H%M%S)

rsync_commands=(
    "-rltDuPv"
    "--progress"
    "--human-readable"
    "--modify-window=1"
    "--log-file=$DESTINATION/.logs/rsync.$TIMESTAMP.log"
    "--delete"
    "--backup"
    "--backup-dir=$DESTINATION/.backups"
    "--suffix=.$TIMESTAMP.backup"
    "--partial"
    "--partial-dir=$DESTINATION/.partials"
    "--filter=merge $FILTER_FILE"
    "--filter=:- .gitignore"
    "--exclude=$DESTINATION/.backups"
    "--exclude=$DESTINATION/.logs"
    "$SOURCE"
    "$DESTINATION"
)

do_rsync() {
    rsync "${rsync_commands[@]}"
    # Clean files older than 30 days
    find "$DESTINATION/.backups/" -daystart -mtime +30 -type f -delete
}

do_rsync_dry_run() {
    rsync --dry-run "${rsync_commands[@]}"
    # Clean files older than 30 days
    find "$DESTINATION/.backups/" -daystart -mtime +30 -type f -delete
}

echo "Source:       $SOURCE"
echo "Destination:  $DESTINATION"
echo
if [ "$REAL_RUN" == "yes" ]; then
    echo "Starting backup..."
    echo
    do_rsync
else
    echo "Starting dry run..."
    echo
    do_rsync_dry_run
    echo
    echo "Run command with -c to backup"
fi

# TODO
# - How to backup encrypted content? (mount crypt dir and backup to it)

